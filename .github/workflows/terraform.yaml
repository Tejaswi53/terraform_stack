name: terraform stack for kasier

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      customer:
        description: 'customer name'
        required: true
        type: string

      environment:
        description: 'select environment'
        required: true
        type: choice
        default: dev
        options:
          - dev
          - stage
          - prod  

      action:
        description: 'select which action to perform'
        required: true
        type: string
        default: plan
        options:
          - plan
          - apply
          - destroy

jobs: 
  terraform_stack_creation:
    runs-on: ubuntu-latest
    name: ${{ inputs.customer }} infra stack ${{ inputs.action }} in ${{ inputs.environment }}  

    steps:
      - name: checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform 
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.3

      - name: AWS Configure
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: us-east-1

      - name: Terraform Format Check
        working-directory: stacks/${{ inputs.customer }}
        run: terraform fmt -check 

      - name: Terraform Init
        working-directory: stacks/${{ inputs.customer }}
        run: |
               terraform init -input=false \
               -backend-config="bucket=terraformbackup020625" \
               -backend-config="key=${{ inputs.customer }}/${{ inputs.environment }}/terraform.tfstate" \
               -backend-config="region=us-east-1"

      - name: Setup Trivy
        uses: aquasecurity/trivy-action@0.31.0
        with:
          scan-type: 'fs'
          scan-ref: 'stacks/${{ inputs.customer }}'
          format: json
          output: trivy-report.json

      - name: Terraform Validate
        working-directory: stacks/${{ inputs.customer }}
        run: terraform validate

      - name: Create or Select Workspace
        working-directory: stacks/${{ inputs.customer }}
        run: |
          if terraform workspace list | grep -q "${{ inputs.environment }}"; then
             terraform workspace select "${{ inputs.environment }}"
           else 
             terraform workspace new "${{ inputs.environment }}" 
             terraform workspace select "${{ inputs.environment }}"
          fi  

      - name: Terraform Plan 
        if: ${{ inputs.action == 'apply' || inputs.action == 'plan' }}
        working-directory: stacks/${{ inputs.customer }}
        run: terraform plan -input=false -out=tfplan -var-file="environments/${{ inputs.environment }}.tfvars" 

      - name: Show Terraform Plan
        if: ${{ inputs.action == 'apply' || inputs.action == 'plan' }}
        working-directory: stacks/${{ inputs.customer }}
        run: terraform show tfplan

      - name: Terraform Apply
        if: ${{ inputs.action == 'apply' }}
        working-directory: stacks/${{ inputs.customer }}
        run: terraform apply -input=false -auto-approve tfplan -var-file="environments/${{ inputs.environment}}.tfvars"  
            
      - name: Terraform Destroy
        if: ${{ inputs.action == 'destroy' }}
        working-directory: stacks/${{ inputs.customer }}
        run: terraform destroy -auto-approve

        
        


